{p, code_eq} = require './helper'

describe 'for', ->
	it 'simple', ->
		code_eq """
			for i in [1..3]
				x!
			null
		""", """
			var i,
				_this = this;

			(function(_$cb$_0) {
				var _body, _i, _step;
				i = _i = 1;
				_step = function() {
					i = ++_i;
					_body();
				};
				_body = function() {
					if (_i <= 3) {
						x(function(_$$_1) {
							_step(_$$_1);
						});
					} else {
						_$cb$_0();
					}
				};
				_body();
			})(function() {
				return null;
			});
		"""

	it 'returns', ->
		code_eq """
			xs = for i in [1..3]
				x!
			null
		""", """
			var i, xs;
			(function(cb) {
				var res, _body, _done, _i, _step;
				res = []
				i = _i = 1;
				_step = function() {
					i = ++_i;
					_body();
				}
				_body = function() {
					if (_i <= 3) {
						x(function(v) {
							_step(res.push(v));
						});
					} else {
						_done();
					}
				}
				_done = function() {
					cb(res);
				}
				_body();
			})(function() {
				xs = arguments[0]
				return null;
			});
		"""

	it 'guard', ->
		code_eq """
			for i in [1..3] when i > 10
				x!
			null
		""", """
			var i;
			(function(cb) {
				var _body, _i, _step;
				i = _i = 1;
				_step = function() {
					i = ++_i;
					_body();
				}
				_body = function() {
					if (_i <= 3) {
						if (i > 10) {
							x(function(v) {
								_step(v);
							});
						} else {
							_step();
						}
					} else {
						cb()
					}
				}
				_body();
			})(function() {
				return null;
			});
		"""
	it 'pluckdirectcall', ->
		code_eq """
			for i in [1..10]
				c = b!
			null
		""", """
			var c, i,
				_this = this;

			(function(_$cb$_0) {
				var _body, _i, _step;
				i = _i = 1;
				_step = function() {
					i = ++_i;
					_body();
				};
				_body = function() {
					if (_i <= 10) {
						b(function() {
							_step(c = arguments[0]);
						});
					} else {
						_$cb$_0();
					}
				};
				_body();
			})(function() {
				return null;
			});
		"""

	it 'end with async condition', ->
		code_eq """
			res = for x in a
				if y = b
					z = c!
		""", """
			var res, x, y, z,
			  _this = this;

			(function(_$cb$_0) {
			  var _$res$_1, _body, _done, _i, _len, _step;
			  _$res$_1 = [];
			  _i = 0, _len = a.length;
			  _step = function() {
				_i++;
				_body();
			  };
			  _body = function() {
				if (_i < _len) {
				  x = a[_i];
				  if (y = b) {
					(function(_$cb$_3) {
					  c(function() {
						_$cb$_3(z = arguments[0]);
					  });
					})(function(_$$_2) {
					  _step(_$res$_1.push(_$$_2));
					});
				  } else {
					_step(_$res$_1.push(void 0));
				  }
				} else {
				  _done();
				}
			  };
			  _done = function() {
				_$cb$_0(_$res$_1);
			  };
			  _body();
			})(function() {
			  return res = arguments[0];
			});
		"""

	it 'nested for', ->
		code_eq """
			for x in a
				for y in b
					c!
			null
		""", """
			var x, y,
			  _this = this;

			(function(_$cb$_1) {
			  var _body, _i, _len, _step;
			  _i = 0, _len = a.length;
			  _step = function() {
				_i++;
				_body();
			  };
			  _body = function() {
				if (_i < _len) {
				  x = a[_i];
				  (function(_$cb$_0) {
					var _body1, _j, _len1, _step1;
					_j = 0, _len1 = b.length;
					_step1 = function() {
					  _j++;
					  _body1();
					};
					_body1 = function() {
					  if (_j < _len1) {
						y = b[_j];
						c(function(_$$_3) {
						  _step1(_$$_3);
						});
					  } else {
						_$cb$_0();
					  }
					};
					_body1();
				  })(function(_$$_2) {
					_step(_$$_2);
				  });
				} else {
				  _$cb$_1();
				}
			  };
			  _body();
			})(function() {
			  return null;
			});
		"""

describe 'while', ->
	it 'simple', ->
		code_eq """
			while true
				x!
			null
		""", """
			(function(cb) {
				var _body;
				_body = function() {
					if (true) {
						x(function(v) {
							_body(v);
						});
					} else {
						cb();
					}
				}
				_body();
			})(function() {
				return null;
			});
		"""

	it 'returns', ->
		code_eq """
			xs = while true
				x!
			null
		""", """
			var xs;
			(function(cb) {
				var res, _body, _done;
				res = []
				_body = function() {
					if (true) {
						x(function(v) {
							_body(res.push(v));
						});
					} else {
						cb();
					}
				}
				_done = function() {
					cb(res);
				}
				_body();
			})(function() {
				xs = arguments[0]
				return null;
			});
		"""

	it 'for own of', ->
		code_eq """
			for own k, v of vs
				x!
			null
		""", """
			var k, v, _$$_0, _$$_1,
				__hasProp = {}.hasOwnProperty,
			_this = this;

			_$$_1 = (function() {
				var _results;
				_results = [];
				for (_$$_0 in vs) {
					if (!__hasProp.call(vs, _$$_0)) continue;
						_results.push(_$$_0);
				}
				return _results;
			})();

			(function(_$cb$_2) {
				var _body, _i, _len, _step;
				_i = 0, _len = _$$_1.length;
				_step = function() {
					_i++;
					_body();
				};
				_body = function() {
					if (_i < _len) {
						k = _$$_1[_i];
						v = vs[k];
						x(function(_$$_3) {
							_step(_$$_3);
						});
					} else {
						_$cb$_2();
					}
				};
				_body();
			})(function() {
				return null;
			});
		"""
