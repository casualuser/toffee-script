// Generated by CoffeeScript 1.6.2
var code_eq, p, _ref;

_ref = require('./helper'), p = _ref.p, code_eq = _ref.code_eq;

describe('for', function() {
  it('simple', function() {
    return code_eq("for i in [1..3]\n	x!\nnull", "(function(cb) {\n	var i, _body, _i, _step;\n	i = _i = 1;\n	_step = function() {\n		i = ++_i;\n		_body();\n	}\n	_body = function() {\n		if (_i <= 3) {\n			x(function(v) {\n				_step(v);\n			});\n		} else {\n			cb();\n		}\n	}\n	_body();\n})(function() {\n	return null;\n});");
  });
  it('returns', function() {
    return code_eq("xs = for i in [1..3]\n	x!\nnull", "var xs;\n(function(cb) {\n	var i, res, _body, _done, _i, _step;\n	res = []\n	i = _i = 1;\n	_step = function() {\n		i = ++_i;\n		_body();\n	}\n	_body = function() {\n		if (_i <= 3) {\n			x(function(v) {\n				_step(res.push(v));\n			});\n		} else {\n			_done();\n		}\n	}\n	_done = function() {\n		cb(res);\n	}\n	_body();\n})(function() {\n	xs = arguments[0]\n	return null;\n});");
  });
  return it('guard', function() {
    return code_eq("for i in [1..3] when i > 10\n	x!\nnull", "(function(cb) {\n	var i, _body, _i, _step;\n	i = _i = 1;\n	_step = function() {\n		i = ++_i;\n		_body();\n	}\n	_body = function() {\n		if (_i <= 3) {\n			if (i > 10) {\n				x(function(v) {\n					_step(v);\n				});\n			} else {\n				_step();\n			}\n		} else {\n			cb()\n		}\n	}\n	_body();\n})(function() {\n	return null;\n});");
  });
});

describe('while', function() {
  it('simple', function() {
    return code_eq("while true\n	x!\nnull", "(function(cb) {\n	var _body;\n	_body = function() {\n		if (true) {\n			x(function(v) {\n				_body(v);\n			});\n		} else {\n			cb();\n		}\n	}\n	_body();\n})(function() {\n	return null;\n});");
  });
  return it('returns', function() {
    return code_eq("xs = while true\n	x!\nnull", "var xs;\n(function(cb) {\n	var res, _body, _done;\n	res = []\n	_body = function() {\n		if (true) {\n			x(function(v) {\n				_body(res.push(v));\n			});\n		} else {\n			cb();\n		}\n	}\n	_done = function() {\n		cb(res);\n	}\n	_body();\n})(function() {\n	xs = arguments[0]\n	return null;\n});");
  });
});
